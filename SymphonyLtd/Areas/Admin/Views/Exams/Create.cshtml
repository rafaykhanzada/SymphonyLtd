@model SymphonyLtd.Models.tblExam

@{
    ViewBag.Title = "Create";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@*<h2>Create</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>tblExam</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ExamName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ExamName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ExamName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Topics_FK, "Topics_FK", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Topics_FK", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Topics_FK, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExamDuration, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ExamDuration, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ExamDuration, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExamScheduleFrom, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ExamScheduleFrom, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ExamScheduleFrom, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExamScheduleTo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ExamScheduleTo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ExamScheduleTo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExamType_FK, "ExamType_FK", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ExamType_FK", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ExamType_FK, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TotalMarks, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TotalMarks, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TotalMarks, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PassingMarks, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PassingMarks, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PassingMarks, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsValid, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsValid)
                    @Html.ValidationMessageFor(model => model.IsValid, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsCancled, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsCancled)
                    @Html.ValidationMessageFor(model => model.IsCancled, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsCancledReason, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IsCancledReason, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IsCancledReason, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreatedOn, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CreatedOn, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CreatedOn, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ModifiedOn, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ModifiedOn, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ModifiedOn, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DeleteOn, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DeleteOn, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DeleteOn, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DeletedBy, "DeletedBy", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("DeletedBy", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.DeletedBy, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>*@


<div class="row clearfix">
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
        <div class="card">
            <div class="header">
                <h2>
                    <strong>Select2</strong> Select Item
                </h2>
                <ul class="header-dropdown m-r--5">
                    <li class="dropdown">
                        <a href="#" onClick="return false;" class="dropdown-toggle" data-toggle="dropdown"
                           role="button" aria-haspopup="true" aria-expanded="false">
                            <i class="material-icons">more_vert</i>
                        </a>
                        <ul class="dropdown-menu pull-right">
                            <li>
                                <a href="#" onClick="return false;">Action</a>
                            </li>
                            <li>
                                <a href="#" onClick="return false;">Another action</a>
                            </li>
                            <li>
                                <a href="#" onClick="return false;">Something else here</a>
                            </li>
                        </ul>
                    </li>
                </ul>
            </div>
            <div class="body">
                @using (Html.BeginForm("Create", "Exam", FormMethod.Post, new { enctype = "multipart/form-data", id = "form_validation" }))
                {
                    @Html.AntiForgeryToken()

                <div class="row clearfix">
                    @Html.HiddenFor(model => model.ExamID)
                    <div class="form-group">
                        @Html.LabelFor(model => model.ExamName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ExamName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ExamName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <p>
                            <b>Topic Cover</b>
                        </p>
                        <div class="form-group default-select select2Style">
                            @Html.DropDownList("Topics_FK", null, htmlAttributes: new { @class = "form-control select2", name = "Topics_FK" })

                        </div>
                    </div>
                    <div class="col-md-6">
                        <p>
                            <b>Course Category</b>
                        </p>
                        <div class="form-group default-select select2Style">
                            @Html.DropDownList("ExamType_FK", null, htmlAttributes: new { @class = "form-control select2", name = "ExamType_FK" })

                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ExamScheduleFrom, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ExamScheduleFrom, new { htmlAttributes = new { @class = "form-control", type = "datetime-local" } })
                            @Html.ValidationMessageFor(model => model.ExamScheduleFrom, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ExamScheduleTo, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ExamScheduleTo, new { htmlAttributes = new { @class = "form-control", type = "datetime-local" } })
                            @Html.ValidationMessageFor(model => model.ExamScheduleFrom, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.TotalMarks, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.TotalMarks, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.TotalMarks, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.PassingMarks, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.PassingMarks, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PassingMarks, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <!--<div class="form-group">
        <div class="col-md-12">-->
                    <!-- Tags Input -->
                    <!--<div class="card">
            <div class="form-group demo-tagsinput-area">
                <div class="form-line">
                    <input type="text" class="form-control" name="Students" id="Students" data-role="tagsinput"
                           value="Amsterdam,Washington,Sydney,Beijing,Cairo">
                </div>
            </div>
        </div>
    </div>-->
                    <!-- #END# Tags Input -->
                    <!--</div>-->
                    <div class="col-md-6">
                        <p>
                            <b>Topic Cover</b>
                        </p>
                        <div class="form-group default-select select2Style">
                            @Html.DropDownList("Students", null, htmlAttributes: new { @class = "form-control select2", multiple = "", name = "Students" })

                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.IsCancledReason, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            @Html.TextAreaFor(model => model.IsCancledReason, new { htmlAttributes = new { rows = "4", @class = "form-control no-resize" } })
                            @Html.ValidationMessageFor(model => model.IsCancledReason, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="form-check m-l-10">
                            <div class="demo-switch-title">IsValid</div>
                            <div class="switch">
                                <label>
                                    @if (Model != null)
                                    {
                                        if (Model.IsValid)
                                        {
                                            <input type="checkbox" id="IsValid" checked />
                                        }
                                    }
                                    else
                                    {
                                        <input type="checkbox" id="IsValid" />
                                    }
                                    <span class="lever switch-col-yellow" for="IsValid"></span>
                                </label>

                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="form-check m-l-10">
                            <div class="demo-switch-title">IsCancled</div>
                            <div class="switch">
                                <label>
                                    @if (Model != null)
                                    {
                                        if (Model.IsCancled)
                                        {
                                            <input type="checkbox" id="IsCancled" checked />
                                        }
                                    }
                                    else
                                    {
                                        <input type="checkbox" id="IsCancled" />
                                    }
                                    <span class="lever switch-col-red" for="IsCancled"></span>
                                </label>

                            </div>
                        </div>
                    </div>
                </div>
                    <div class="form-group">
                        <button style="float:right" class="btn btn-primary waves-effect" type="submit">SUBMIT</button>

                    </div>
                }
            </div>
        </div>
    </div>
</div>
<script>
    
    $("#IsValid").on('change', function () {
        if ($(this).is(':checked')) {
            if ($("#IsCancled").is(':checked')) {
                $("#IsCancled").click();
            }
            $("#IsCancledReason").attr('disabled', true);

        } else {
            $("#IsCancledReason").removeAttr('disabled');

        }
    }); $("#IsCancled").on('change', function () {
        if ($(this).is(':checked')) {
            if ($("#IsValid").is(':checked')) {
                $("#IsValid").click();
                $("#IsCancledReason").removeAttr('disabled');

            }
            $("#IsCancledReason").removeAttr('disabled');

        }

    });
    $("#form_validation").submit((e) => {
        e.preventDefault();
        var url = '@Url.Action("Create","Exams")';
        var model = {
            "ExamID": $("#ExamID").val(),
            "ExamName": $("#ExamName").val(),
            "Topics_FK": $("#Topics_FK").val(),
            "ExamType_FK": $("#ExamType_FK").val(),
            "ExamScheduleFrom": $("#ExamScheduleFrom").val(),
            "ExamScheduleTo": $("#ExamScheduleTo").val(),
            "TotalMarks": $("#TotalMarks").val(),
            "PassingMarks": $("#PassingMarks").val(),
            "Students": $("#Students").val().toString(),
            "IsValid": $("#IsValid").is(':checked'),
            "IsCancled": $("#IsCancled").is(':checked'),
        };
        $.ajax({
            type: "POST",
            url: url,
            data: model, // serializes the form's elements.
            success: function (data) {
                console.log(data); // show response from the php script.
            }
        });

    });
   
</script>

@if (Model !=null)
{
<script>
    $('#Students').val('2')
    $('#Students').trigger('change')

         function loadStoresList(selector, selectedItems) {
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetAllStuentForExamByID", "Ajax")',
            dataType: "json",
            contentType: "application/json",
            success: function (res) {
                //$('#StoreId').append($("<option></option>").val("0").html(res.data[0].name));
                //$(selector).append($("<option></option>").val('0').html('Select'));
                //$.each(res.data, function (data, value) {
                //    if (selectedItems && selectedItems.includes(+value.id)) {
                //        $(selector).append($("<option selected></option>").val(value.id).html(value.name));
                //    } else {
                //        $(selector).append($("<option></option>").val(value.id).html(value.name));
                //    }
                //})
                console.log(res);
            }

        });
    }
    $(document).ready(() => { loadStoresList();})
</script>
}